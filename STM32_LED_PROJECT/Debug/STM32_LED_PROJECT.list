
STM32_LED_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e8  080043e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08004400  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08004400  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc64  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  0002fca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00031998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aa0  00000000  00000000  00033500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5e0  00000000  00000000  0004cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6dc1  00000000  00000000  0005c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  00103394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800436c 	.word	0x0800436c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800436c 	.word	0x0800436c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fbe4 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f831 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f96b 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004e2:	f000 f873 	bl	80005cc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f937 	bl	8000758 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t text_uart[] = "command received   ";
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <main+0x64>)
 80004ec:	f107 0410 	add.w	r4, r7, #16
 80004f0:	461d      	mov	r5, r3
 80004f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f6:	682b      	ldr	r3, [r5, #0]
 80004f8:	6023      	str	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hal_receive_status = HAL_UART_Receive(&huart2, uart_received_data, 10, 100);
 80004fa:	1d39      	adds	r1, r7, #4
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	220a      	movs	r2, #10
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x68>)
 8000502:	f003 fa2b 	bl	800395c <HAL_UART_Receive>
 8000506:	4603      	mov	r3, r0
 8000508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if (hal_receive_status == HAL_OK)
 800050c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f2      	bne.n	80004fa <main+0x2a>
	  {
		  led_mode = uart_received_data[8];
 8000514:	7b3a      	ldrb	r2, [r7, #12]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x6c>)
 8000518:	701a      	strb	r2, [r3, #0]
		  text_uart[17] = led_mode;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <main+0x6c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		  HAL_UART_Transmit(&huart2, text_uart, sizeof(text_uart), 100);
 8000522:	f107 0110 	add.w	r1, r7, #16
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	2214      	movs	r2, #20
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x68>)
 800052c:	f003 f982 	bl	8003834 <HAL_UART_Transmit>
	  hal_receive_status = HAL_UART_Receive(&huart2, uart_received_data, 10, 100);
 8000530:	e7e3      	b.n	80004fa <main+0x2a>
 8000532:	bf00      	nop
 8000534:	08004384 	.word	0x08004384
 8000538:	20000078 	.word	0x20000078
 800053c:	200000fc 	.word	0x200000fc

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff04 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f000 fed3 	bl	8001310 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 fa2e 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000574:	2310      	movs	r3, #16
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff15 	bl	80013bc <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000598:	f000 fa1a 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fb67 	bl	8001c88 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c0:	f000 fa06 	bl	80009d0 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	; 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09a      	sub	sp, #104	; 0x68
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	222c      	movs	r2, #44	; 0x2c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fea8 	bl	800435c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <MX_TIM1_Init+0x184>)
 800060e:	4a51      	ldr	r2, [pc, #324]	; (8000754 <MX_TIM1_Init+0x188>)
 8000610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <MX_TIM1_Init+0x184>)
 8000614:	221f      	movs	r2, #31
 8000616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <MX_TIM1_Init+0x184>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_TIM1_Init+0x184>)
 8000620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <MX_TIM1_Init+0x184>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 9;
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <MX_TIM1_Init+0x184>)
 800062e:	2209      	movs	r2, #9
 8000630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000632:	4b47      	ldr	r3, [pc, #284]	; (8000750 <MX_TIM1_Init+0x184>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000638:	4845      	ldr	r0, [pc, #276]	; (8000750 <MX_TIM1_Init+0x184>)
 800063a:	f001 feb1 	bl	80023a0 <HAL_TIM_Base_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000644:	f000 f9c4 	bl	80009d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800064e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000652:	4619      	mov	r1, r3
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <MX_TIM1_Init+0x184>)
 8000656:	f002 fb0f 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000660:	f000 f9b6 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000664:	483a      	ldr	r0, [pc, #232]	; (8000750 <MX_TIM1_Init+0x184>)
 8000666:	f001 ff93 	bl	8002590 <HAL_TIM_PWM_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000670:	f000 f9ae 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000680:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	4832      	ldr	r0, [pc, #200]	; (8000750 <MX_TIM1_Init+0x184>)
 8000688:	f002 ff8a 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000692:	f000 f99d 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000696:	2360      	movs	r3, #96	; 0x60
 8000698:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b6:	2204      	movs	r2, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4825      	ldr	r0, [pc, #148]	; (8000750 <MX_TIM1_Init+0x184>)
 80006bc:	f002 f9c8 	bl	8002a50 <HAL_TIM_PWM_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006c6:	f000 f983 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	2208      	movs	r2, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	481f      	ldr	r0, [pc, #124]	; (8000750 <MX_TIM1_Init+0x184>)
 80006d4:	f002 f9bc 	bl	8002a50 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80006de:	f000 f977 	bl	80009d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_TIM1_Init+0x184>)
 8000718:	f002 ffa8 	bl	800366c <HAL_TIMEx_ConfigBreakDeadTime>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000722:	f000 f955 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <MX_TIM1_Init+0x184>)
 8000728:	f001 fede 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <MX_TIM1_Init+0x184>)
 800072e:	f001 fe8f 	bl	8002450 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000732:	2104      	movs	r1, #4
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_TIM1_Init+0x184>)
 8000736:	f001 ff8d 	bl	8002654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800073a:	2108      	movs	r1, #8
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_TIM1_Init+0x184>)
 800073e:	f001 ff89 	bl	8002654 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM1_Init+0x184>)
 8000744:	f000 f994 	bl	8000a70 <HAL_TIM_MspPostInit>

}
 8000748:	bf00      	nop
 800074a:	3768      	adds	r7, #104	; 0x68
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000002c 	.word	0x2000002c
 8000754:	40012c00 	.word	0x40012c00

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 fffc 	bl	8003798 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f913 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000078 	.word	0x20000078
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_GPIO_Init+0xb8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_GPIO_Init+0xb8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_GPIO_Init+0xb8>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_GPIO_Init+0xb8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <MX_GPIO_Init+0xbc>)
 800081c:	f000 fd3a 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000820:	2308      	movs	r3, #8
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <MX_GPIO_Init+0xbc>)
 8000838:	f000 fbba 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000840:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_GPIO_Init+0xbc>)
 8000852:	f000 fbad 	bl	8000fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2017      	movs	r0, #23
 800085c:	f000 fb71 	bl	8000f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000860:	2017      	movs	r0, #23
 8000862:	f000 fb8a 	bl	8000f7a <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400

08000878 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin)
	{


	}
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	static int16_t channel2_value = 0, channel3_value = 0;
	static int16_t sign2 = 1, sign3 = 1;
	if (htim == &htim1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a47      	ldr	r2, [pc, #284]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800089c:	4293      	cmp	r3, r2
 800089e:	f040 8084 	bne.w	80009aa <HAL_TIM_PeriodElapsedCallback+0x11a>
	{
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, channel2_value);
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, channel3_value);
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80008b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008b4:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	63da      	str	r2, [r3, #60]	; 0x3c

		  switch(led_mode)
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b74      	cmp	r3, #116	; 0x74
 80008c0:	d006      	beq.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x40>
 80008c2:	2b74      	cmp	r3, #116	; 0x74
 80008c4:	dc4b      	bgt.n	800095e <HAL_TIM_PeriodElapsedCallback+0xce>
 80008c6:	2b66      	cmp	r3, #102	; 0x66
 80008c8:	d024      	beq.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x84>
 80008ca:	2b73      	cmp	r3, #115	; 0x73
 80008cc:	d007      	beq.n	80008de <HAL_TIM_PeriodElapsedCallback+0x4e>
 80008ce:	e046      	b.n	800095e <HAL_TIM_PeriodElapsedCallback+0xce>
		  {
		  case TERMINATE:
			  channel2_value = 0;
 80008d0:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	801a      	strh	r2, [r3, #0]
			  channel3_value = 0;
 80008d6:	4b3a      	ldr	r3, [pc, #232]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]
			  break;
 80008dc:	e03f      	b.n	800095e <HAL_TIM_PeriodElapsedCallback+0xce>
		  case SLOW:
			  channel2_value += 1 * sign2;
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80008e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008f6:	801a      	strh	r2, [r3, #0]
			  channel3_value += 1 * sign3;
 80008f8:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80008fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b32      	ldr	r3, [pc, #200]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000910:	801a      	strh	r2, [r3, #0]
			  break;
 8000912:	e024      	b.n	800095e <HAL_TIM_PeriodElapsedCallback+0xce>
		  case FAST:
			  channel2_value += 10 * sign2;
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	4413      	add	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	b29b      	uxth	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000936:	801a      	strh	r2, [r3, #0]
			  channel3_value += 10 * sign3;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	b29b      	uxth	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000950:	b29b      	uxth	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	b21a      	sxth	r2, r3
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800095a:	801a      	strh	r2, [r3, #0]
			  break;
 800095c:	bf00      	nop
		  }
		  if (channel2_value >= 999)
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000964:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000968:	4293      	cmp	r3, r2
 800096a:	dd03      	ble.n	8000974 <HAL_TIM_PeriodElapsedCallback+0xe4>
		  {
			  sign2 = -1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000972:	801a      	strh	r2, [r3, #0]
		  }
		  if (channel3_value >= 999)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800097e:	4293      	cmp	r3, r2
 8000980:	dd03      	ble.n	800098a <HAL_TIM_PeriodElapsedCallback+0xfa>
		  {
			  sign3 = -1;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	801a      	strh	r2, [r3, #0]
		  }

		  if (channel2_value <= 0)
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800098c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dc02      	bgt.n	800099a <HAL_TIM_PeriodElapsedCallback+0x10a>
		  {
			  sign2 = 1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000996:	2201      	movs	r2, #1
 8000998:	801a      	strh	r2, [r3, #0]
		  }
		  if (channel3_value <= 0)
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800099c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dc02      	bgt.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x11a>
		  {
			  sign3 = 1;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	801a      	strh	r2, [r3, #0]
		  }
	}

}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	200000fe 	.word	0x200000fe
 80009c0:	20000100 	.word	0x20000100
 80009c4:	200000fc 	.word	0x200000fc
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000002 	.word	0x20000002

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6613      	str	r3, [r2, #96]	; 0x60
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_TIM_Base_MspInit+0x44>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d113      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a40:	6613      	str	r3, [r2, #96]	; 0x60
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2019      	movs	r0, #25
 8000a54:	f000 fa75 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fa8e 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_TIM_MspPostInit+0x68>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d11d      	bne.n	8000ace <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_TIM_MspPostInit+0x6c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_TIM_MspPostInit+0x6c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_TIM_MspPostInit+0x6c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED2_CONTROL_Pin|LED1_CONTROL_Pin;
 8000aaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f000 fa71 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b096      	sub	sp, #88	; 0x58
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2234      	movs	r2, #52	; 0x34
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fc2b 	bl	800435c <memset>
  if(huart->Instance==USART2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a28      	ldr	r2, [pc, #160]	; (8000bac <HAL_UART_MspInit+0xcc>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d148      	bne.n	8000ba2 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fab9 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b28:	f7ff ff52 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0xd0>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fa19 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b90:	2303      	movs	r3, #3
 8000b92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fa07 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f8a4 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	f000 fb59 	bl	80012c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c1e:	f001 fdf7 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000002c 	.word	0x2000002c

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 fb49 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc25 	bl	80004d0 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c94:	080043f0 	.word	0x080043f0
  ldr r2, =_sbss
 8000c98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c9c:	20000108 	.word	0x20000108

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f93d 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fe8a 	bl	80009dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_InitTick+0x70>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f949 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f913 	bl	8000f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	20000004 	.word	0x20000004
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	20000104 	.word	0x20000104

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000104 	.word	0x20000104

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e14e      	b.n	800125e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8140 	beq.w	8001258 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x40>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d017      	beq.n	800108e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d123      	bne.n	80010e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	6939      	ldr	r1, [r7, #16]
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0203 	and.w	r2, r3, #3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 809a 	beq.w	8001258 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2cc>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6613      	str	r3, [r2, #96]	; 0x60
 8001130:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x1e0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1dc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x2d8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a44      	ldr	r2, [pc, #272]	; (800128c <HAL_GPIO_Init+0x2dc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1d4>
 8001180:	2303      	movs	r3, #3
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001184:	2307      	movs	r3, #7
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001188:	2302      	movs	r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001190:	2300      	movs	r3, #0
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a2:	4937      	ldr	r1, [pc, #220]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d4:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	f47f aea9 	bne.w	8000fc0 <HAL_GPIO_Init+0x10>
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fac8 	bl	8000878 <HAL_GPIO_EXTI_Callback>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_PWREx_GetVoltageRange+0x18>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131e:	d130      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132c:	d038      	beq.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2232      	movs	r2, #50	; 0x32
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	3301      	adds	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001354:	e002      	b.n	800135c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d102      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f2      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d110      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e00f      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138e:	d007      	beq.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	431bde83 	.word	0x431bde83

080013bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f000 bc53 	b.w	8001c76 <HAL_RCC_OscConfig+0x8ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d0:	4b97      	ldr	r3, [pc, #604]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80e6 	beq.w	80015be <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_RCC_OscConfig+0x4c>
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	f040 808d 	bne.w	800151a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 8089 	bne.w	800151a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001408:	4b89      	ldr	r3, [pc, #548]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_RCC_OscConfig+0x66>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	f000 bc2a 	b.w	8001c76 <HAL_RCC_OscConfig+0x8ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <HAL_RCC_OscConfig+0x80>
 8001432:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143a:	e005      	b.n	8001448 <HAL_RCC_OscConfig+0x8c>
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800143e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001448:	4293      	cmp	r3, r2
 800144a:	d224      	bcs.n	8001496 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fdbf 	bl	8001fd4 <RCC_SetFlashLatencyFromMSIRange>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f000 bc0a 	b.w	8001c76 <HAL_RCC_OscConfig+0x8ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a72      	ldr	r2, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	496d      	ldr	r1, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4968      	ldr	r1, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e025      	b.n	80014e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001496:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	4960      	ldr	r1, [pc, #384]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b4:	4b5e      	ldr	r3, [pc, #376]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	495b      	ldr	r1, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fd7e 	bl	8001fd4 <RCC_SetFlashLatencyFromMSIRange>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e3c9      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e2:	f000 fcb3 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4950      	ldr	r1, [pc, #320]	; (8001634 <HAL_RCC_OscConfig+0x278>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_RCC_OscConfig+0x27c>)
 8001500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fbe4 	bl	8000cd4 <HAL_InitTick>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d052      	beq.n	80015bc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	e3ad      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d032      	beq.n	8001588 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800152e:	f7ff fc21 	bl	8000d74 <HAL_GetTick>
 8001532:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001536:	f7ff fc1d 	bl	8000d74 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e396      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a35      	ldr	r2, [pc, #212]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	492b      	ldr	r1, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e01a      	b.n	80015be <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001594:	f7ff fbee 	bl	8000d74 <HAL_GetTick>
 8001598:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff fbea 	bl	8000d74 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e363      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x1e0>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d073      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x220>
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d10e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d063      	beq.n	80016b0 <HAL_RCC_OscConfig+0x2f4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d15f      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e340      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x250>
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e025      	b.n	8001658 <HAL_RCC_OscConfig+0x29c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d114      	bne.n	8001640 <HAL_RCC_OscConfig+0x284>
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a02      	ldr	r2, [pc, #8]	; (8001630 <HAL_RCC_OscConfig+0x274>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e013      	b.n	8001658 <HAL_RCC_OscConfig+0x29c>
 8001630:	40021000 	.word	0x40021000
 8001634:	08004398 	.word	0x08004398
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008
 8001640:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a8e      	ldr	r2, [pc, #568]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b8c      	ldr	r3, [pc, #560]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb88 	bl	8000d74 <HAL_GetTick>
 8001664:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fb84 	bl	8000d74 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2fd      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167a:	4b81      	ldr	r3, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x2ac>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb74 	bl	8000d74 <HAL_GetTick>
 800168c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fb70 	bl	8000d74 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e2e9      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	4b77      	ldr	r3, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x2d4>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d060      	beq.n	8001780 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x314>
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d116      	bne.n	80016fe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x32c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2c6      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	4962      	ldr	r1, [pc, #392]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	e040      	b.n	8001780 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d023      	beq.n	800174e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001706:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fb2f 	bl	8000d74 <HAL_GetTick>
 8001716:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fb2b 	bl	8000d74 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e2a4      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172c:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	494e      	ldr	r1, [pc, #312]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4b      	ldr	r2, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fb0b 	bl	8000d74 <HAL_GetTick>
 800175e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fb07 	bl	8000d74 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e280      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8082 	beq.w	8001892 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d05f      	beq.n	8001856 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d037      	beq.n	800181c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e258      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01b      	beq.n	8001806 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017de:	f7ff fac9 	bl	8000d74 <HAL_GetTick>
 80017e2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fac5 	bl	8000d74 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b11      	cmp	r3, #17
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e23e      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ef      	bne.n	80017e6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	f023 0210 	bic.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	491a      	ldr	r1, [pc, #104]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff faa2 	bl	8000d74 <HAL_GetTick>
 8001830:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fa9e 	bl	8000d74 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b11      	cmp	r3, #17
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e217      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ef      	beq.n	8001834 <HAL_RCC_OscConfig+0x478>
 8001854:	e01d      	b.n	8001892 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fa85 	bl	8000d74 <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fa81 	bl	8000d74 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b11      	cmp	r3, #17
 800187a:	d903      	bls.n	8001884 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1fa      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
 8001880:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	4ba9      	ldr	r3, [pc, #676]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ed      	bne.n	800186e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80bd 	beq.w	8001a1a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018a6:	4ba1      	ldr	r3, [pc, #644]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10e      	bne.n	80018d0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a9d      	ldr	r2, [pc, #628]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b9b      	ldr	r3, [pc, #620]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <HAL_RCC_OscConfig+0x774>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d118      	bne.n	800190e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018dc:	4b94      	ldr	r3, [pc, #592]	; (8001b30 <HAL_RCC_OscConfig+0x774>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a93      	ldr	r2, [pc, #588]	; (8001b30 <HAL_RCC_OscConfig+0x774>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa44 	bl	8000d74 <HAL_GetTick>
 80018ec:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff fa40 	bl	8000d74 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1b9      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <HAL_RCC_OscConfig+0x774>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02c      	beq.n	8001974 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800191a:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	497f      	ldr	r1, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a79      	ldr	r2, [pc, #484]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001950:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a75      	ldr	r2, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001960:	e018      	b.n	8001994 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001962:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001974:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a6c      	ldr	r2, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001984:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a68      	ldr	r2, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d016      	beq.n	80019ca <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f9ea 	bl	8000d74 <HAL_GetTick>
 80019a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff f9e6 	bl	8000d74 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e15d      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ed      	beq.n	80019a4 <HAL_RCC_OscConfig+0x5e8>
 80019c8:	e01d      	b.n	8001a06 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff f9d3 	bl	8000d74 <HAL_GetTick>
 80019ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff f9cf 	bl	8000d74 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e146      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ed      	bne.n	80019d2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 80019fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a34:	4a3d      	ldr	r2, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f999 	bl	8000d74 <HAL_GetTick>
 8001a42:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff f995 	bl	8000d74 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e10e      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0ef      	beq.n	8001a46 <HAL_RCC_OscConfig+0x68a>
 8001a66:	e01b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6e:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f97c 	bl	8000d74 <HAL_GetTick>
 8001a7c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7ff f978 	bl	8000d74 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0f1      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ef      	bne.n	8001a80 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80e5 	beq.w	8001c74 <HAL_RCC_OscConfig+0x8b8>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	f040 80b5 	bne.w	8001c1e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d124      	bne.n	8001b12 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d113      	bne.n	8001b12 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d05f      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d05a      	beq.n	8001bce <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x770>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b24:	f7ff f926 	bl	8000d74 <HAL_GetTick>
 8001b28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2a:	e00c      	b.n	8001b46 <HAL_RCC_OscConfig+0x78a>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f91e 	bl	8000d74 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e097      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x8c8>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b6c:	0212      	lsls	r2, r2, #8
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b74:	0852      	lsrs	r2, r2, #1
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0552      	lsls	r2, r2, #21
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b80:	0852      	lsrs	r2, r2, #1
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0652      	lsls	r2, r2, #25
 8001b86:	430a      	orrs	r2, r1
 8001b88:	493d      	ldr	r1, [pc, #244]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba6:	f7ff f8e5 	bl	8000d74 <HAL_GetTick>
 8001baa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff f8e1 	bl	8000d74 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e05a      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bcc:	e052      	b.n	8001c74 <HAL_RCC_OscConfig+0x8b8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e051      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d14a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x8b8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf6:	f7ff f8bd 	bl	8000d74 <HAL_GetTick>
 8001bfa:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f8b9 	bl	8000d74 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x842>
 8001c1c:	e02a      	b.n	8001c74 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d025      	beq.n	8001c70 <HAL_RCC_OscConfig+0x8b4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c46:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f894 	bl	8000d74 <HAL_GetTick>
 8001c4c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x8a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f890 	bl	8000d74 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x8a6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <HAL_RCC_OscConfig+0x8c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x894>
 8001c6e:	e001      	b.n	8001c74 <HAL_RCC_OscConfig+0x8b8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x8ba>
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	f99f808c 	.word	0xf99f808c

08001c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0c8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4961      	ldr	r1, [pc, #388]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b0      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d04c      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d121      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e09e      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d115      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e092      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e086      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e07e      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 0203 	bic.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	493f      	ldr	r1, [pc, #252]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d42:	f7ff f817 	bl	8000d74 <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4a:	f7ff f813 	bl	8000d74 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e066      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 020c 	and.w	r2, r3, #12
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d1eb      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	492c      	ldr	r1, [pc, #176]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d210      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4924      	ldr	r1, [pc, #144]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e036      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4918      	ldr	r1, [pc, #96]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4910      	ldr	r1, [pc, #64]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dfe:	f000 f825 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ff56 	bl	8000cd4 <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08004398 	.word	0x08004398
 8001e44:	20000004 	.word	0x20000004
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x34>
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d121      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d11e      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	e004      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ed2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d134      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ef0:	e005      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef4:	617b      	str	r3, [r7, #20]
      break;
 8001ef6:	e005      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001efa:	617b      	str	r3, [r7, #20]
      break;
 8001efc:	e002      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	617b      	str	r3, [r7, #20]
      break;
 8001f02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	3301      	adds	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fb03 f202 	mul.w	r2, r3, r2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	0e5b      	lsrs	r3, r3, #25
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	3301      	adds	r3, #1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f44:	69bb      	ldr	r3, [r7, #24]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080043b0 	.word	0x080043b0
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080043a8 	.word	0x080043a8

08001fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fac:	f7ff ffda 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0adb      	lsrs	r3, r3, #11
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080043a8 	.word	0x080043a8

08001fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fec:	f7ff f982 	bl	80012f4 <HAL_PWREx_GetVoltageRange>
 8001ff0:	6178      	str	r0, [r7, #20]
 8001ff2:	e014      	b.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800200c:	f7ff f972 	bl	80012f4 <HAL_PWREx_GetVoltageRange>
 8002010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d10b      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d919      	bls.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2ba0      	cmp	r3, #160	; 0xa0
 8002030:	d902      	bls.n	8002038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e013      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002038:	2301      	movs	r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e010      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d902      	bls.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002044:	2303      	movs	r3, #3
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e00a      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d102      	bne.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002050:	2302      	movs	r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	e004      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b70      	cmp	r3, #112	; 0x70
 800205a:	d101      	bne.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800205c:	2301      	movs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4909      	ldr	r1, [pc, #36]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800209c:	2300      	movs	r3, #0
 800209e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a0:	2300      	movs	r3, #0
 80020a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 809e 	beq.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fe3e 	bl	8000d74 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe fe3a 	bl	8000d74 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	74fb      	strb	r3, [r7, #19]
        break;
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15a      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	429a      	cmp	r2, r3
 800213c:	d019      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe fdfa 	bl	8000d74 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	e00b      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fdf6 	bl	8000d74 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d902      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	74fb      	strb	r3, [r7, #19]
            break;
 800219a:	e006      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ec      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021c6:	e009      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
 80021cc:	e006      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021dc:	7c7b      	ldrb	r3, [r7, #17]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b6e      	ldr	r3, [pc, #440]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a6d      	ldr	r2, [pc, #436]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f023 0203 	bic.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4964      	ldr	r1, [pc, #400]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 020c 	bic.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	495c      	ldr	r1, [pc, #368]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4953      	ldr	r1, [pc, #332]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	494b      	ldr	r1, [pc, #300]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4942      	ldr	r1, [pc, #264]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	493a      	ldr	r1, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c6:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	4931      	ldr	r1, [pc, #196]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4929      	ldr	r1, [pc, #164]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4920      	ldr	r1, [pc, #128]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	4918      	ldr	r1, [pc, #96]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234a:	d105      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002390:	7cbb      	ldrb	r3, [r7, #18]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e049      	b.n	8002446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fb2c 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 fd3c 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e033      	b.n	80024d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_TIM_Base_Start+0x8c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_TIM_Base_Start+0x3e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d004      	beq.n	800248e <HAL_TIM_Base_Start+0x3e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIM_Base_Start+0x90>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d115      	bne.n	80024ba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_TIM_Base_Start+0x94>)
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d015      	beq.n	80024cc <HAL_TIM_Base_Start+0x7c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a6:	d011      	beq.n	80024cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b8:	e008      	b.n	80024cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e000      	b.n	80024ce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40014000 	.word	0x40014000
 80024e4:	00010007 	.word	0x00010007

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e03b      	b.n	8002578 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_TIM_Base_Start_IT+0x9c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d004      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_TIM_Base_Start_IT+0xa0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d115      	bne.n	8002562 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_TIM_Base_Start_IT+0xa4>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d015      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d011      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002560:	e008      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e000      	b.n	8002576 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40014000 	.word	0x40014000
 800258c:	00010007 	.word	0x00010007

08002590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e049      	b.n	8002636 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f841 	bl	800263e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 fc44 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_TIM_PWM_Start+0x24>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e03c      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d109      	bne.n	8002692 <HAL_TIM_PWM_Start+0x3e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e02f      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x58>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x72>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x8c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07e      	b.n	80027f8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0xb6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	e023      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0xc6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	e01b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	e013      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d104      	bne.n	800273a <HAL_TIM_PWM_Start+0xe6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002738:	e00b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b10      	cmp	r3, #16
 800273e:	d104      	bne.n	800274a <HAL_TIM_PWM_Start+0xf6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	e003      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fefa 	bl	8003554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_TIM_PWM_Start+0x1ac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_TIM_PWM_Start+0x12a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a25      	ldr	r2, [pc, #148]	; (8002804 <HAL_TIM_PWM_Start+0x1b0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_PWM_Start+0x12a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_TIM_PWM_Start+0x1b4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_TIM_PWM_Start+0x12e>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_TIM_PWM_Start+0x130>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_TIM_PWM_Start+0x1ac>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_TIM_PWM_Start+0x162>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d004      	beq.n	80027b6 <HAL_TIM_PWM_Start+0x162>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_TIM_PWM_Start+0x1b0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d115      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_TIM_PWM_Start+0x1b8>)
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b06      	cmp	r3, #6
 80027c6:	d015      	beq.n	80027f4 <HAL_TIM_PWM_Start+0x1a0>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d011      	beq.n	80027f4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	e008      	b.n	80027f4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e000      	b.n	80027f6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40014000 	.word	0x40014000
 8002808:	40014400 	.word	0x40014400
 800280c:	00010007 	.word	0x00010007

08002810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0202 	mvn.w	r2, #2
 800283c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fae3 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fad5 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fae6 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0204 	mvn.w	r2, #4
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fab9 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 faab 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fabc 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0208 	mvn.w	r2, #8
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2204      	movs	r2, #4
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa8f 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa81 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa92 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0210 	mvn.w	r2, #16
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2208      	movs	r2, #8
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa65 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa57 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fa68 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0201 	mvn.w	r2, #1
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd ff7e 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b80      	cmp	r3, #128	; 0x80
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fed8 	bl	8003770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d10e      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fecb 	bl	8003784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fa16 	bl	8002e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0220 	mvn.w	r2, #32
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fe8b 	bl	800375c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0ff      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b14      	cmp	r3, #20
 8002a7a:	f200 80f0 	bhi.w	8002c5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002ad9 	.word	0x08002ad9
 8002a88:	08002c5f 	.word	0x08002c5f
 8002a8c:	08002c5f 	.word	0x08002c5f
 8002a90:	08002c5f 	.word	0x08002c5f
 8002a94:	08002b19 	.word	0x08002b19
 8002a98:	08002c5f 	.word	0x08002c5f
 8002a9c:	08002c5f 	.word	0x08002c5f
 8002aa0:	08002c5f 	.word	0x08002c5f
 8002aa4:	08002b5b 	.word	0x08002b5b
 8002aa8:	08002c5f 	.word	0x08002c5f
 8002aac:	08002c5f 	.word	0x08002c5f
 8002ab0:	08002c5f 	.word	0x08002c5f
 8002ab4:	08002b9b 	.word	0x08002b9b
 8002ab8:	08002c5f 	.word	0x08002c5f
 8002abc:	08002c5f 	.word	0x08002c5f
 8002ac0:	08002c5f 	.word	0x08002c5f
 8002ac4:	08002bdd 	.word	0x08002bdd
 8002ac8:	08002c5f 	.word	0x08002c5f
 8002acc:	08002c5f 	.word	0x08002c5f
 8002ad0:	08002c5f 	.word	0x08002c5f
 8002ad4:	08002c1d 	.word	0x08002c1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fa20 	bl	8002f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6999      	ldr	r1, [r3, #24]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	619a      	str	r2, [r3, #24]
      break;
 8002b16:	e0a5      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fa7c 	bl	800301c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
      break;
 8002b58:	e084      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fad5 	bl	8003110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0208 	orr.w	r2, r2, #8
 8002b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
      break;
 8002b98:	e064      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fb2d 	bl	8003200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
      break;
 8002bda:	e043      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fb6a 	bl	80032bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c1a:	e023      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fba2 	bl	800336c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c5c:	e002      	b.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
      break;
 8002c62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop

08002c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_ConfigClockSource+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0b6      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x18a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd0:	d03e      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0xd8>
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	f200 8087 	bhi.w	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cde:	f000 8086 	beq.w	8002dee <HAL_TIM_ConfigClockSource+0x176>
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce6:	d87f      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002ce8:	2b70      	cmp	r3, #112	; 0x70
 8002cea:	d01a      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0xaa>
 8002cec:	2b70      	cmp	r3, #112	; 0x70
 8002cee:	d87b      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002cf0:	2b60      	cmp	r3, #96	; 0x60
 8002cf2:	d050      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x11e>
 8002cf4:	2b60      	cmp	r3, #96	; 0x60
 8002cf6:	d877      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002cf8:	2b50      	cmp	r3, #80	; 0x50
 8002cfa:	d03c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0xfe>
 8002cfc:	2b50      	cmp	r3, #80	; 0x50
 8002cfe:	d873      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d058      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x13e>
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d86f      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002d08:	2b30      	cmp	r3, #48	; 0x30
 8002d0a:	d064      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002d0c:	2b30      	cmp	r3, #48	; 0x30
 8002d0e:	d86b      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d060      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d867      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05c      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d05a      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002d20:	e062      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f000 fbef 	bl	8003514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	609a      	str	r2, [r3, #8]
      break;
 8002d4e:	e04f      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f000 fbd8 	bl	8003514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d72:	609a      	str	r2, [r3, #8]
      break;
 8002d74:	e03c      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 fb4c 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2150      	movs	r1, #80	; 0x50
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fba5 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002d94:	e02c      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 fb6b 	bl	800347e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2160      	movs	r1, #96	; 0x60
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fb95 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002db4:	e01c      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 fb2c 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fb85 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e00c      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f000 fb7c 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002de6:	e003      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e000      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <TIM_Base_SetConfig+0xbc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_Base_SetConfig+0x20>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d108      	bne.n	8002e8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <TIM_Base_SetConfig+0xbc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00b      	beq.n	8002eae <TIM_Base_SetConfig+0x52>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d007      	beq.n	8002eae <TIM_Base_SetConfig+0x52>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <TIM_Base_SetConfig+0xc0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_Base_SetConfig+0x52>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <TIM_Base_SetConfig+0xc4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d108      	bne.n	8002ec0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <TIM_Base_SetConfig+0xbc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0xa0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <TIM_Base_SetConfig+0xc0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0xa0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <TIM_Base_SetConfig+0xc4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	615a      	str	r2, [r3, #20]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40014400 	.word	0x40014400

08002f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 0302 	bic.w	r3, r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <TIM_OC1_SetConfig+0xec>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_OC1_SetConfig+0x70>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a23      	ldr	r2, [pc, #140]	; (8003014 <TIM_OC1_SetConfig+0xf0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC1_SetConfig+0x70>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a22      	ldr	r2, [pc, #136]	; (8003018 <TIM_OC1_SetConfig+0xf4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10c      	bne.n	8002fae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f023 0308 	bic.w	r3, r3, #8
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	; (8003010 <TIM_OC1_SetConfig+0xec>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_OC1_SetConfig+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <TIM_OC1_SetConfig+0xf0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_OC1_SetConfig+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <TIM_OC1_SetConfig+0xf4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d111      	bne.n	8002fea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400

0800301c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0320 	bic.w	r3, r3, #32
 800306a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a22      	ldr	r2, [pc, #136]	; (8003104 <TIM_OC2_SetConfig+0xe8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10d      	bne.n	800309c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <TIM_OC2_SetConfig+0xe8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_OC2_SetConfig+0x98>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <TIM_OC2_SetConfig+0xec>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_OC2_SetConfig+0x98>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <TIM_OC2_SetConfig+0xf0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d113      	bne.n	80030dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400

08003110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <TIM_OC3_SetConfig+0xe4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10d      	bne.n	800318e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <TIM_OC3_SetConfig+0xe4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_OC3_SetConfig+0x96>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <TIM_OC3_SetConfig+0xe8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x96>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a16      	ldr	r2, [pc, #88]	; (80031fc <TIM_OC3_SetConfig+0xec>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d113      	bne.n	80031ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	621a      	str	r2, [r3, #32]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400

08003200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	031b      	lsls	r3, r3, #12
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <TIM_OC4_SetConfig+0xb0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_OC4_SetConfig+0x74>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <TIM_OC4_SetConfig+0xb4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC4_SetConfig+0x74>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <TIM_OC4_SetConfig+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d109      	bne.n	8003288 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400

080032bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <TIM_OC5_SetConfig+0xa4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_OC5_SetConfig+0x6a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a12      	ldr	r2, [pc, #72]	; (8003364 <TIM_OC5_SetConfig+0xa8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC5_SetConfig+0x6a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <TIM_OC5_SetConfig+0xac>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d109      	bne.n	800333a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400

0800336c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	051b      	lsls	r3, r3, #20
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <TIM_OC6_SetConfig+0xa8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_OC6_SetConfig+0x6c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <TIM_OC6_SetConfig+0xac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_OC6_SetConfig+0x6c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <TIM_OC6_SetConfig+0xb0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d109      	bne.n	80033ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	029b      	lsls	r3, r3, #10
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0210 	bic.w	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f043 0307 	orr.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800352e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	431a      	orrs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2201      	movs	r2, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	43db      	mvns	r3, r3
 8003576:	401a      	ands	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e04f      	b.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d004      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10c      	bne.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40014000 	.word	0x40014000

0800366c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e060      	b.n	800374a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d115      	bne.n	8003738 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00

0800375c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e040      	b.n	800382c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd f990 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f992 	bl	8003b00 <UART_SetConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e022      	b.n	800382c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fbe0 	bl	8003fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fc67 	bl	80040f8 <UART_CheckIdleState>
 800382a:	4603      	mov	r3, r0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003848:	2b20      	cmp	r3, #32
 800384a:	f040 8082 	bne.w	8003952 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Transmit+0x26>
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07a      	b.n	8003954 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UART_Transmit+0x38>
 8003868:	2302      	movs	r3, #2
 800386a:	e073      	b.n	8003954 <HAL_UART_Transmit+0x120>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fd fa77 	bl	8000d74 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x80>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038c4:	e02d      	b.n	8003922 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fc5a 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e039      	b.n	8003954 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f2:	b292      	uxth	r2, r2
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e008      	b.n	8003910 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b292      	uxth	r2, r2
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3301      	adds	r3, #1
 800390e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1cb      	bne.n	80038c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2200      	movs	r2, #0
 8003936:	2140      	movs	r1, #64	; 0x40
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fc26 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e005      	b.n	8003954 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003970:	2b20      	cmp	r3, #32
 8003972:	f040 80bf 	bne.w	8003af4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_UART_Receive+0x26>
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0b7      	b.n	8003af6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UART_Receive+0x38>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b0      	b.n	8003af6 <HAL_UART_Receive+0x19a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2222      	movs	r2, #34	; 0x22
 80039a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b0:	f7fd f9e0 	bl	8000d74 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d10e      	bne.n	80039ee <HAL_UART_Receive+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_UART_Receive+0x88>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039e2:	e02d      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ec:	e028      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_UART_Receive+0xb6>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Receive+0xac>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a06:	e01b      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	227f      	movs	r2, #127	; 0x7f
 8003a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a10:	e016      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1a:	d10d      	bne.n	8003a38 <HAL_UART_Receive+0xdc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_UART_Receive+0xd2>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	227f      	movs	r2, #127	; 0x7f
 8003a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a2c:	e008      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	223f      	movs	r2, #63	; 0x3f
 8003a32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a36:	e003      	b.n	8003a40 <HAL_UART_Receive+0xe4>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d108      	bne.n	8003a64 <HAL_UART_Receive+0x108>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e003      	b.n	8003a6c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a74:	e033      	b.n	8003ade <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2120      	movs	r1, #32
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fb82 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e032      	b.n	8003af6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	8a7b      	ldrh	r3, [r7, #18]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e00d      	b.n	8003acc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	8a7b      	ldrh	r3, [r7, #18]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1c5      	bne.n	8003a76 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b08a      	sub	sp, #40	; 0x28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <UART_SetConfig+0x2a8>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a93      	ldr	r2, [pc, #588]	; (8003dac <UART_SetConfig+0x2ac>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a8a      	ldr	r2, [pc, #552]	; (8003db0 <UART_SetConfig+0x2b0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d126      	bne.n	8003bd8 <UART_SetConfig+0xd8>
 8003b8a:	4b8a      	ldr	r3, [pc, #552]	; (8003db4 <UART_SetConfig+0x2b4>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d81b      	bhi.n	8003bd0 <UART_SetConfig+0xd0>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <UART_SetConfig+0xa0>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e0ab      	b.n	8003d10 <UART_SetConfig+0x210>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e0a7      	b.n	8003d10 <UART_SetConfig+0x210>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e0a3      	b.n	8003d10 <UART_SetConfig+0x210>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e09f      	b.n	8003d10 <UART_SetConfig+0x210>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e09b      	b.n	8003d10 <UART_SetConfig+0x210>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a76      	ldr	r2, [pc, #472]	; (8003db8 <UART_SetConfig+0x2b8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d138      	bne.n	8003c54 <UART_SetConfig+0x154>
 8003be2:	4b74      	ldr	r3, [pc, #464]	; (8003db4 <UART_SetConfig+0x2b4>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d82d      	bhi.n	8003c4c <UART_SetConfig+0x14c>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0xf8>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c4d 	.word	0x08003c4d
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e06d      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e069      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e065      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e061      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e05d      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <UART_SetConfig+0x2bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d125      	bne.n	8003caa <UART_SetConfig+0x1aa>
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <UART_SetConfig+0x2b4>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d016      	beq.n	8003c9a <UART_SetConfig+0x19a>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d818      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d00a      	beq.n	8003c8a <UART_SetConfig+0x18a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d814      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <UART_SetConfig+0x182>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d008      	beq.n	8003c92 <UART_SetConfig+0x192>
 8003c80:	e00f      	b.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c88:	e042      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c90:	e03e      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c92:	2304      	movs	r3, #4
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c98:	e03a      	b.n	8003d10 <UART_SetConfig+0x210>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca0:	e036      	b.n	8003d10 <UART_SetConfig+0x210>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca8:	e032      	b.n	8003d10 <UART_SetConfig+0x210>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3f      	ldr	r2, [pc, #252]	; (8003dac <UART_SetConfig+0x2ac>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12a      	bne.n	8003d0a <UART_SetConfig+0x20a>
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <UART_SetConfig+0x2b4>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc2:	d01a      	beq.n	8003cfa <UART_SetConfig+0x1fa>
 8003cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc8:	d81b      	bhi.n	8003d02 <UART_SetConfig+0x202>
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d00c      	beq.n	8003cea <UART_SetConfig+0x1ea>
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	d815      	bhi.n	8003d02 <UART_SetConfig+0x202>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <UART_SetConfig+0x1e2>
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d008      	beq.n	8003cf2 <UART_SetConfig+0x1f2>
 8003ce0:	e00f      	b.n	8003d02 <UART_SetConfig+0x202>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce8:	e012      	b.n	8003d10 <UART_SetConfig+0x210>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf0:	e00e      	b.n	8003d10 <UART_SetConfig+0x210>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf8:	e00a      	b.n	8003d10 <UART_SetConfig+0x210>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d00:	e006      	b.n	8003d10 <UART_SetConfig+0x210>
 8003d02:	2310      	movs	r3, #16
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d08:	e002      	b.n	8003d10 <UART_SetConfig+0x210>
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <UART_SetConfig+0x2ac>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f040 808a 	bne.w	8003e30 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d824      	bhi.n	8003d6e <UART_SetConfig+0x26e>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0x22c>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d5f 	.word	0x08003d5f
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7fe f914 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003d54:	61f8      	str	r0, [r7, #28]
        break;
 8003d56:	e010      	b.n	8003d7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <UART_SetConfig+0x2c0>)
 8003d5a:	61fb      	str	r3, [r7, #28]
        break;
 8003d5c:	e00d      	b.n	8003d7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7fe f875 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003d62:	61f8      	str	r0, [r7, #28]
        break;
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6a:	61fb      	str	r3, [r7, #28]
        break;
 8003d6c:	e005      	b.n	8003d7a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8109 	beq.w	8003f94 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d305      	bcc.n	8003d9e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d912      	bls.n	8003dc4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da4:	e0f6      	b.n	8003f94 <UART_SetConfig+0x494>
 8003da6:	bf00      	nop
 8003da8:	efff69f3 	.word	0xefff69f3
 8003dac:	40008000 	.word	0x40008000
 8003db0:	40013800 	.word	0x40013800
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40004400 	.word	0x40004400
 8003dbc:	40004800 	.word	0x40004800
 8003dc0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	461c      	mov	r4, r3
 8003dca:	4615      	mov	r5, r2
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	022b      	lsls	r3, r5, #8
 8003dd6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dda:	0222      	lsls	r2, r4, #8
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	6849      	ldr	r1, [r1, #4]
 8003de0:	0849      	lsrs	r1, r1, #1
 8003de2:	2000      	movs	r0, #0
 8003de4:	4688      	mov	r8, r1
 8003de6:	4681      	mov	r9, r0
 8003de8:	eb12 0a08 	adds.w	sl, r2, r8
 8003dec:	eb43 0b09 	adc.w	fp, r3, r9
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dfe:	4650      	mov	r0, sl
 8003e00:	4659      	mov	r1, fp
 8003e02:	f7fc f9e3 	bl	80001cc <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e14:	d308      	bcc.n	8003e28 <UART_SetConfig+0x328>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1c:	d204      	bcs.n	8003e28 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	e0b5      	b.n	8003f94 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e2e:	e0b1      	b.n	8003f94 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	d15d      	bne.n	8003ef6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d827      	bhi.n	8003e92 <UART_SetConfig+0x392>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x348>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe f886 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003e70:	61f8      	str	r0, [r7, #28]
        break;
 8003e72:	e014      	b.n	8003e9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe f898 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8003e78:	61f8      	str	r0, [r7, #28]
        break;
 8003e7a:	e010      	b.n	8003e9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <UART_SetConfig+0x4b0>)
 8003e7e:	61fb      	str	r3, [r7, #28]
        break;
 8003e80:	e00d      	b.n	8003e9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fd ffe3 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003e86:	61f8      	str	r0, [r7, #28]
        break;
 8003e88:	e009      	b.n	8003e9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	61fb      	str	r3, [r7, #28]
        break;
 8003e90:	e005      	b.n	8003e9e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d077      	beq.n	8003f94 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005a      	lsls	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	441a      	add	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b0f      	cmp	r3, #15
 8003ebe:	d916      	bls.n	8003eee <UART_SetConfig+0x3ee>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d212      	bcs.n	8003eee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	8afa      	ldrh	r2, [r7, #22]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	e052      	b.n	8003f94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef4:	e04e      	b.n	8003f94 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d827      	bhi.n	8003f4e <UART_SetConfig+0x44e>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x404>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f4f 	.word	0x08003f4f
 8003f14:	08003f3f 	.word	0x08003f3f
 8003f18:	08003f4f 	.word	0x08003f4f
 8003f1c:	08003f4f 	.word	0x08003f4f
 8003f20:	08003f4f 	.word	0x08003f4f
 8003f24:	08003f47 	.word	0x08003f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7fe f828 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003f2c:	61f8      	str	r0, [r7, #28]
        break;
 8003f2e:	e014      	b.n	8003f5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7fe f83a 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8003f34:	61f8      	str	r0, [r7, #28]
        break;
 8003f36:	e010      	b.n	8003f5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <UART_SetConfig+0x4b0>)
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e00d      	b.n	8003f5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3e:	f7fd ff85 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003f42:	61f8      	str	r0, [r7, #28]
        break;
 8003f44:	e009      	b.n	8003f5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	61fb      	str	r3, [r7, #28]
        break;
 8003f4c:	e005      	b.n	8003f5a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f58:	bf00      	nop
    }

    if (pclk != 0U)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d019      	beq.n	8003f94 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	085a      	lsrs	r2, r3, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	441a      	add	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d909      	bls.n	8003f8e <UART_SetConfig+0x48e>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d205      	bcs.n	8003f8e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	e002      	b.n	8003f94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01a      	beq.n	80040ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d10a      	bne.n	80040ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004108:	f7fc fe34 	bl	8000d74 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10e      	bne.n	800413a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f82d 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e023      	b.n	8004182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d10e      	bne.n	8004166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f817 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00d      	b.n	8004182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b09c      	sub	sp, #112	; 0x70
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	e0a5      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	f000 80a1 	beq.w	80042e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fc fde5 	bl	8000d74 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <UART_WaitOnFlagUntilTimeout+0x32>
 80041b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d13e      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d0:	667b      	str	r3, [r7, #100]	; 0x64
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e6      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3308      	adds	r3, #8
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800420e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e067      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d04f      	beq.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d147      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004260:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
 8004282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	613b      	str	r3, [r7, #16]
   return(result);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042b4:	623a      	str	r2, [r7, #32]
 80042b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e010      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	429a      	cmp	r2, r3
 8004304:	f43f af4a 	beq.w	800419c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3770      	adds	r7, #112	; 0x70
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	; (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	; (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	; (8004358 <__libc_init_array+0x44>)
 8004328:	f000 f820 	bl	800436c <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	080043e8 	.word	0x080043e8
 8004350:	080043e8 	.word	0x080043e8
 8004354:	080043e8 	.word	0x080043e8
 8004358:	080043ec 	.word	0x080043ec

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
